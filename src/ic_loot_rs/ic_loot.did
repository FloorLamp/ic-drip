type HeaderField = record { text; text; };

type HttpRequest = record {
  method: text;
  url: text;
  headers: vec HeaderField;
  body: blob;
};

type HttpResponse = record {
  status_code: nat16;
  headers: vec HeaderField;
  body: blob;
};

type AddressBook = record {
  total_supply: nat64;
  tokens: vec record { nat64; principal};
  controllers: vec principal;
  claim_index: nat64;
  token_seeds: vec record { nat64; nat64};
};

type ClaimResult = variant {
  Ok : nat64;
  Err: text;
};

service : {
    http_request: (request: HttpRequest) -> (HttpResponse) query;

    get_address_book: () -> (AddressBook) query;
    get_token_properties: (nat64) -> (vec record { text; text}) query;

    get_airdrops: () -> (vec record { nat64; bool }) query;
    add_airdrops: (vec principal) -> (bool);
    name: () -> (text) query;
    symbol: () -> (text) query;
    user_tokens: (principal) -> (vec nat64) query;
    owner_of: (nat64) -> (opt principal) query;
    transfer_to: (principal, nat64) -> (bool);
    claim: () -> (ClaimResult);
    remaining: () -> (nat64);
    supply: () -> (nat64);

    get_controllers: () -> (vec principal) query;
    add_controller: (principal) -> (bool);
    remove_controller: (principal) -> (bool);
}
